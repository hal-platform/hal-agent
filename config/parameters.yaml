parameters:
    ############################################################################
    # application
    ############################################################################
    application.id: '201359'
    application.title: 'Hal Agent'
    application.environment: '%env(ENVIRONMENT)%'

    application.major.version: '%env(HAL_APPLICATION_VERSION_MAJOR)%'
    application.minor.version: '%env(HAL_APPLICATION_VERSION_MINOR)%'
    application.version: '%application.major.version%.%application.minor.version%'

    application.sha: '%env(HAL_APPLICATION_SHA)%'

    hal.pushfile.path: '%root%/.hal9000.push.yml'

    ############################################################################
    # general
    ############################################################################
    root: '%env(HAL_ROOT)%'
    hal.baseurl: '%env(HAL_BASEURL)%'
    hal.api_token: '%env(HAL_API_TOKEN)%'

    unique.alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
    unique.size: 4
    date.timezone: 'America/Detroit'

    ############################################################################
    # paths
    ############################################################################
    path.archive: '%env(HAL_PATH_ARTIFACT_ARCHIVE)%'        # permanent filesystem artifact repository
    path.temp: '%env(HAL_PATH_BUILD_TEMP)%'                 # temporary scratch, local
    path.linux_builder: '%env(HAL_PATH_LINUX_BUILDER)%'     # temporary scratch, linux builder

    ############################################################################
    # builders
    ############################################################################
    build.linux.user: '%env(HAL_LINUX_BUILDER_USER)%'
    build.linux.server: '%env(HAL_LINUX_BUILDER_SERVER)%'
    build.linux.keypath: '%env(HAL_LINUX_SSH_KEYPATH)%'

    deploy.rsync.user: '%env(HAL_RSYNC_DEPLOY_USER)%'
    deploy.rsync.keypath: '%env(HAL_RSYNC_SSH_KEYPATH)%'

    ############################################################################
    # logging
    ############################################################################
    error_handling.log_stacktrace: '%env(HAL_LOG_STACKTRACES_ON)%'
    error_handling.docker.debug: '%env(HAL_LOG_DOCKER_DEBUG_ON)%'

    ############################################################################
    # timeouts
    ############################################################################
    timeout.build: 1800
    timeout.push: 300

    timeout.push.build: 300
    timeout.deploy.serverCommand: 120

    timeout.standard: 20
    timeout.filepacking: 120
    timeout.filetransfer: 120

    deploy.cd.waiter.interval: 10
    deploy.cd.waiter.max: 60

    push.eb.waiter.interval: 10
    push.eb.waiter.max: 60

    build.ssm.waiter.interval: 10
    build.ssm.waiter.max: 180

    timeout.linux_builder_internal: 120
    timeout.windows_builder_internal: 120

    ############################################################################
    # cache
    ############################################################################
    redis.server: '%env(HAL_REDIS_SERVER)%'
    redis.prefix: '%env(HAL_REDIS_PREFIX)%'

    cache.type.main: '%env(HAL_CACHE_MAIN)%'
    cache.type.github: '%env(HAL_CACHE_GITHUB)%'

    cache.github.default.ttl: 60
    cache.github.short.ttl: 20

    ############################################################################
    # windows platform
    ############################################################################
    build.windows_aws.build_path: '%env(HAL_WIN_AWS_BUILD_PATH)%'
    build.windows_aws.build_script_path: '%env(HAL_WIN_AWS_BUILD_SCRIPT_PATH)%'
    build.windows_aws.build_tools_path: '%env(HAL_WIN_AWS_BUILD_TOOLS_PATH)%'

    build.windows_aws.region: '%env(HAL_WIN_AWS_REGION)%'
    build.windows_aws.credential_name: '%env(HAL_WIN_AWS_CREDENTIAL)%'
    build.windows_aws.bucket: '%env(HAL_WIN_AWS_BUCKET)%'
    build.windows_aws.builder_filter: '%env(HAL_WIN_AWS_BUILDER_FILTER)%'

    ############################################################################
    # windows docker
    ############################################################################
    build.platforms.option.windows.docker_private_registry: '%env(HAL_WIN_DOCKER_PRIVATE_REG)%'
    build.platforms.option.windows.docker_easy_repo: '%env(HAL_DOCKER_EASY_REPO)%'
    build.platforms.option.windows.docker_default_image: '%build.platforms.option.windows.docker_private_registry%/hal-build-environments:vs2015'

    # "latest" also allows no tag
    build.platforms.option.windows.allowed_images:
        'microsoft/nanoserver':
            - 'latest'
            - '10.0.14393.1480'
            - '10.0.14393.1593'
        'microsoft/windowsservercore':
            - '10.0.14393.1480'
        '%build.platforms.option.windows.docker_private_registry%/hal-build-environments':
            - '*'

    build.platforms.option.manual_dns: '%env(HAL_DNS_INJECT_OPTIONS)%'

    ############################################################################
    # linux platform
    ############################################################################
    build.platforms.option.linux.docker_private_registry: '%env(HAL_LINUX_DOCKER_PRIVATE_REG)%'
    build.platforms.option.linux.docker_easy_repo: '%env(HAL_DOCKER_EASY_REPO)%'
    build.platforms.option.linux.docker_default_image: 'halplatform/hal-build-environments:debian8-buildpack'

    # "latest" also allows no tag
    build.platforms.option.linux.allowed_images:
        'halplatform/hal-build-environments':
            - '*'
        '%build.platforms.option.linux.docker_private_registry%/hal-build-environments':
            - '*'
        'hal9000/base_centos7':
            - 'latest'

    ############################################################################
    # credentials / encryption
    ############################################################################
    ssh.credentials:
        - ['%build.linux.user%',  '*', 'key:%build.linux.keypath%']
        - ['%deploy.rsync.user%', '*', 'key:%deploy.rsync.keypath%']

    aws.credentials.use_host: '%env(HAL_AWS_CREDENTIALS_USE_HOST)%'
    aws.credentials.profile: '%env(HAL_AWS_CREDENTIALS_PROFILE)%'
    aws.credentials.path: '%env(HAL_AWS_CREDENTIALS_PATH)%'

    encrypter.secret.path: '%env(HAL_CRYPTO_SECRETPATH)%'
    encrypter.publickey: '%env(HAL_CRYPTO_PUBLICKEY)%'
    encrypter.encryptedkey: '%env(HAL_CRYPTO_PRIVATEKEY)%'

    ############################################################################
    # platform modules
    ############################################################################

    build.platforms:
        linux: 'build_platform.linux'
        windows: 'build_platform.windows_aws_docker'

    deployment_before.build.platforms: '%build.platforms%'
    deployment_after.build.platforms: '%build.platforms%'

    deployment.platforms:
        # rsync: 'deploy_platform.rsync'
        # eb: 'deploy_platform.eb'
        s3: 'deploy_platform.s3'
        cd: 'deploy_platform.cd'
        script: 'deploy_platform.script'

    deployment_platform.script.platforms: '%build.platforms%'

    deploy.s3.strategies:
        artifact: 'deploy_platform.s3.artifact'
        sync: 'deploy_platform.s3.sync'
