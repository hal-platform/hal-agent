services:

    logger: @monolog

    monolog:
        class: 'Monolog\Logger'
        arguments: ['hal9000']
        calls:
            - ['pushHandler', [@monolog.handler.console]]
            - ['pushHandler', [@monolog.handler.buffer]]

    ####################################################################################################################
    # monolog handlers
    ####################################################################################################################

    monolog.handler.console:
        class: 'Symfony\Bridge\Monolog\Handler\ConsoleHandler'

    # custom buffer handler that can run a custom callback before close
    monolog.handler.buffer:
        class: 'QL\Hal\Agent\Logger\BufferHandler'
        arguments: [@monolog.handler.agent]

    monolog.handler.agent:
        class: 'QL\Hal\Agent\Logger\AgentHandler'
        calls:
            - ['setLogger', ['mcp', @logger.mcp, @logger.mcp.formatter]]
            - ['setLogger', ['email', @logger.email, @logger.email.formatter]]

    ####################################################################################################################
    # custom formatters and logging utils
    ####################################################################################################################

    logger.mcp.formatter:
        class: 'QL\Hal\Agent\Logger\TextMcpFormatter'
        arguments: [@logger.normalizer]

    logger.email.formatter:
        class: 'QL\Hal\Agent\Logger\HtmlEmailFormatter'
        arguments: [@logger.normalizer]

    logger.normalizer:
        class: 'QL\Hal\Agent\Logger\Normalizer'
        arguments: ['Y-m-d H:i:s']
    logger.resolver:
        class: 'QL\Hal\Agent\Logger\Resolver'

    ####################################################################################################################
    # actual loggers
    ####################################################################################################################

    logger.mcp:
        class: 'MCP\Service\Logger\Logger'
        arguments: [@logger.mcp.service, @logger.mcp.factory]

    logger.email:
        class: 'QL\Hal\Agent\Logger\EmailLogger'
        arguments: [@emailer, @emailer.message]

    ####################################################################################################################
    # email logger services
    ####################################################################################################################

    emailer:
        class: 'Swift_Mailer'
        arguments: [@emailer.transport]
    emailer.transport:
        class: 'Swift_SmtpTransport'
        arguments: [%email.server%]
    emailer.message:
        class: 'Swift_Message'
        calls:
            - ['setFrom', [%email.from%, 'HAL9000']]
            - ['setReplyTo', [%email.reply%]]
            - ['setCc', [%email.notify%]]
            - ['setContentType', ['text/html']]
            - ['setSubject', ['Critical Error']]
            # to, subject will be set at runtime

    ####################################################################################################################
    # mcp logger services
    ####################################################################################################################

    # subscriber to symfony/console event system to prepare mcp logger
    logger.mcp.subscriber:
        class: 'QL\Hal\Agent\Logger\McpLoggerSetupSubscriber'
        arguments: [@logger.mcp.factory]

    logger.mcp.service:
        class: 'MCP\Service\Logger\Service\GuzzleService'
        arguments: [@logger.mcp.guzzle, @logger.mcp.renderer, true]
    logger.mcp.guzzle:
        class: 'Guzzle\Http\Client'
        arguments: [%logger.mcp.host%]
    logger.mcp.renderer:
        class: 'MCP\Service\Logger\Renderer\XmlRenderer'
        arguments: [@logger.mcp.writer]
    logger.mcp.writer:
        class: 'XMLWriter'

    logger.mcp.factory:
        class: 'MCP\Service\Logger\Adapter\Psr\MessageFactory'
        arguments: [@clock]
        calls:
          - ['setDefaultProperty', ['applicationId', %application.id%]]
          # replaced at runtime, maybe
          - ['setDefaultProperty', ['machineIPAddress', @logger.mcp.serverIp]]
          # replaced at runtime
          - ['setDefaultProperty', ['machineName', 'localhost']]
    logger.mcp.serverIp:
        class: 'MCP\DataType\IPv4Address'
        factory_class: 'MCP\DataType\IPv4Address'
        factory_method: 'create'
        arguments: ['0.0.0.0']
