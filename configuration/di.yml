services:

    # imported from global scope
    # @doctrine.em
    # @repository.repo
    # @environment.repo
    # @user.repo
    # @deployment.repo
    # @push.repo
    # @mcp-logger
    # @mcp-logger.factory

    # %agent.environment.archive%
    # %agent.environment.path%
    # %agent.environment.temp%
    # %agent.environment.home%
    # %agent.ssh-user%
    # %github.token%
    # %github.baseurl%
    # %github.com.token%
    # %mcp-logger.host%
    application:
        scope: 'agent'
        class: 'Symfony\Component\Console\Application'
        arguments:
            - '%agent.application.name%'
            - '%agent.application.version%'
        calls:
            # Every one of these commands is instantiated regardless of the running command
            # There is no way to lazy load these without significant jankiness
            - ['add', ['@command.build.create']]
            - ['add', ['@command.build.build']]
            - ['add', ['@command.build.remove']]
            - ['add', ['@command.push.create']]
            - ['add', ['@command.push.push']]
            - ['add', ['@command.builds.list']]
            - ['add', ['@command.worker.build']]
            - ['add', ['@command.worker.push']]
            - ['setDispatcher', ['@dispatcher']]
    dispatcher:
        scope: 'agent'
        class: 'Symfony\Component\EventDispatcher\EventDispatcher'
        calls:
            - ['addSubscriber', ['@mcp-logger.factory.subscriber']]
            - ['addSubscriber', ['@monolog.handler.console']]
            - ['addSubscriber', ['@utility.exception-handler']]

    clock:
        scope: 'agent'
        class: 'MCP\DataType\Time\Clock'
        arguments: ['now', 'UTC']

    logger:
        scope: 'agent'
        class: 'QL\Hal\Agent\Logger\CommandLogger'
        arguments:
            - '@monolog'
            - '@monolog.handler.buffer'
            - '@emailer.message'
            - '%agent.email.subjects%'

    # commands
    command.build.create:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\CreateBuildCommand'
        arguments:
            - 'build:create'
            - '@doctrine.em'
            - '@clock'
            - '@repository.repo'
            - '@environment.repo'
            - '@user.repo'
            - '@utility.reference-resolver'
    command.build.build:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\BuildCommand'
        arguments:
            - 'build:build'
            - '@logger'
            - '@doctrine.em'
            - '@clock'
            - '@build.resolver'
            - '@build.downloader'
            - '@build.unpacker'
            - '@build.builder'
            - '@build.packer'
            - '@utility.helper.download-progress'
            - '@utility.process.builder=' # = signifies a prototype service
    command.build.remove:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\RemoveBuildCommand'
        arguments:
            - 'build:remove'
            - '@doctrine.em'
            - '@build.repo'
            - '@utility.filesystem'
            - '%agent.environment.archive%'
    command.builds.list:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\ListBuildsCommand'
        arguments:
            - 'builds:list'
            - '@build.repo'
            - '@utility.filesystem'
            - '%agent.environment.archive%'
    command.push.create:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\CreatePushCommand'
        arguments:
            - 'push:create'
            - '@doctrine.em'
            - '@clock'
            - '@build.repo'
            - '@deployment.repo'
            - '@user.repo'
    command.push.push:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\PushCommand'
        arguments:
            - 'push:push'
            - '@logger'
            - '@doctrine.em'
            - '@clock'
            - '@push.resolver'
            - '@push.unpacker'
            - '@push.pusher'
            - '@push.server-command'
            - '@utility.process.builder=' # = signifies a prototype service
    command.worker.build:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\Worker\BuildCommand'
        arguments:
            - 'worker:build'
            - 'build:build'
            - '@build.repo'
            - '@doctrine.em'
            - '@utility.forker'
            - '@mcp-logger'
    command.worker.push:
        scope: 'agent'
        class: 'QL\Hal\Agent\Command\Worker\PushCommand'
        arguments:
            - 'worker:push'
            - 'push:push'
            - '@push.repo'
            - '@doctrine.em'
            - '@utility.forker'
            - '@mcp-logger'

    # utility
    utility.helper.download-progress:
        scope: 'agent'
        class: 'QL\Hal\Agent\Helper\DownloadProgressHelper'
        arguments:
            - '@github.guzzleHttpClient'
    utility.yaml-dumper:
        scope: 'agent'
        class: 'Symfony\Component\Yaml\Dumper'
        calls:
            - ['setIndentation', ['4']]
    utility.filesystem:
        scope: 'agent'
        class: 'Symfony\Component\Filesystem\Filesystem'
    utility.process.builder:
        scope: 'agent'
        class: 'Symfony\Component\Process\ProcessBuilder'
        scope: prototype
        calls:
            - ['inheritEnvironmentVariables', [false]]
    utility.reference-resolver:
        scope: 'agent'
        class: 'QL\Hal\Agent\Github\ReferenceResolver'
        arguments:
            - '@github.references'
            - '@github.commits'
            - '@github.pull-requests'
    utility.forker:
        scope: 'agent'
        class: 'QL\Hal\Agent\Helper\ForkHelper'
    utility.exception-handler:
        scope: 'agent'
        class: 'QL\Hal\Agent\Helper\ExceptionHandlerSubscriber'
        arguments: ['@mcp-logger']

    # build actions
    build.resolver:
        scope: 'agent'
        class: 'QL\Hal\Agent\Build\Resolver'
        arguments:
            - '@logger'
            - '@build.repo'
            - '%agent.environment.path%'
            - '%agent.environment.archive%'
        calls:
            - ['setBaseBuildDirectory', ['%agent.environment.temp%']]
            - ['setHomeDirectory', ['%agent.environment.home%']]
    build.downloader:
        scope: 'agent'
        class: 'QL\Hal\Agent\Build\Downloader'
        arguments:
            - '@logger'
            - '@github.archive'
    build.unpacker:
        scope: 'agent'
        class: 'QL\Hal\Agent\Build\Unpacker'
        arguments:
            - '@logger'
            - '@utility.process.builder=' # = signifies a prototype service
    build.package-manager-preparer:
        scope: 'agent'
        class: 'QL\Hal\Agent\Build\PackageManagerPreparer'
        arguments:
            - '@logger'
            - '@utility.filesystem'
            - '%github.com.token%'
    build.builder:
        scope: 'agent'
        class: 'QL\Hal\Agent\Build\Builder'
        arguments:
            - '@logger'
            - '@utility.process.builder=' # = signifies a prototype service
    build.packer:
        scope: 'agent'
        class: 'QL\Hal\Agent\Build\Packer'
        arguments:
            - '@logger'
            - '@utility.process.builder=' # = signifies a prototype service

    # push actions
    push.resolver:
        scope: 'agent'
        class: 'QL\Hal\Agent\Push\Resolver'
        arguments:
            - '@logger'
            - '@push.repo'
            - '@clock'
            - '%agent.ssh-user%'
            - '%agent.environment.archive%'
        calls:
            - ['setBaseBuildDirectory', ['%agent.environment.temp%']]
    push.unpacker:
        scope: 'agent'
        class: 'QL\Hal\Agent\Push\Unpacker'
        arguments:
            - '@logger'
            - '@utility.process.builder=' # = signifies a prototype service
            - '@utility.filesystem'
            - '@utility.yaml-dumper'
    push.pusher:
        scope: 'agent'
        class: 'QL\Hal\Agent\Push\Pusher'
        arguments:
            - '@logger'
            - '@utility.process.builder=' # = signifies a prototype service
    push.server-command:
        scope: 'agent'
        class: 'QL\Hal\Agent\Push\ServerCommand'
        arguments:
            - '@logger'
            - '@utility.process.builder=' # = signifies a prototype service
            - '%agent.ssh-user%'

    # github services
    github.archive:
        scope: 'agent'
        class: 'QL\Hal\Agent\Github\ArchiveApi'
        arguments:
            - '@github.client'
            - '@utility.filesystem'
    github.references:
        scope: 'agent'
        class: 'Github\Api\GitData\References'
        arguments:
            - '@github.client'
    github.commits:
        scope: 'agent'
        class: 'Github\Api\GitData\Commits'
        arguments:
            - '@github.client'
    github.pull-requests:
        scope: 'agent'
        class: 'Github\Api\PullRequest'
        arguments:
            - '@github.client'

    github.client:
        scope: 'agent'
        class: 'Github\Client'
        arguments: ['@github.httpClient']
    github.httpClient:
        scope: 'agent'
        class: 'Github\HttpClient\HttpClient'
        arguments: [[], '@github.guzzleHttpClient']
        calls:
            - ['authenticate', ['%github.token%', null, 'http_token']]
    github.guzzleHttpClient:
        scope: 'agent'
        class: 'Guzzle\Http\Client'
        arguments:
            - '%github.baseurl%'
            -
                curl.options:
                    progress: true

    # logger services
    # the amount of handlers is ridiculous
    monolog:
        scope: 'agent'
        class: 'Monolog\Logger'
        arguments: ['hal9000']
        calls:
            - ['pushHandler', ['@monolog.handler.console']]
            - ['pushHandler', ['@monolog.handler.buffer']]
    monolog.handler.buffer:
        scope: 'agent'
        class: 'QL\Hal\Agent\Logger\BufferHandler'
        arguments:
            - '@monolog.handler.group'
    monolog.handler.group:
        scope: 'agent'
        class: 'Monolog\Handler\GroupHandler'
        arguments:
            - ['@monolog.handler.parent', '@monolog.handler.swiftmailer']

    # mcp handler
    monolog.handler.parent:
        class: 'QL\Hal\Agent\Logger\ParentLogHandler'
        arguments: ['@mcp-logger']
        calls:
            - ['setFormatter', ['@monolog.formatter.text-formatter']]

    # email handler
    monolog.handler.swiftmailer:
        scope: 'agent'
        class: 'Monolog\Handler\SwiftMailerHandler'
        arguments:
            - '@emailer'
            - '@emailer.message'
            - '100'
        calls:
            - ['setFormatter', ['@monolog.handler.swiftmailer.formatter']]
    monolog.handler.swiftmailer.formatter:
        scope: 'agent'
        class: 'QL\Hal\Agent\Logger\HtmlFormatter'

    # console handler
    monolog.handler.console:
        scope: 'agent'
        class: 'Symfony\Bridge\Monolog\Handler\ConsoleHandler'

    monolog.formatter.text-formatter:
        class: 'QL\Hal\Agent\Logger\TextFormatter'
        arguments: ['', '', true]

    mcp-logger.factory.subscriber:
        scope: 'agent'
        class: 'QL\Hal\Agent\Logger\McpLoggerSetupSubscriber'
        arguments: ['@mcp-logger.factory']

    # emailer services
    emailer:
        scope: 'agent'
        class: 'Swift_Mailer'
        arguments: ['@emailer.transport']
    emailer.transport:
        scope: 'agent'
        class: 'Swift_SmtpTransport'
        arguments: ['%agent.email.server%']
    emailer.message:
        scope: 'agent'
        class: 'Swift_Message'
        calls:
            - ['setFrom', ['%agent.email.from%', 'HAL9000']]
            - ['setReplyTo', ['%agent.email.reply%']]
            - ['setCc', ['%agent.email.notify%']]
            - ['setContentType', ['text/html']]
            - ['setSubject', ['Critical Error']]
            # to, subject will be set at runtime
