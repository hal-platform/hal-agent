#!/usr/bin/env bash

set -eo pipefail

function ensure_is_installed {
  local readonly name="$1"

  if [[ ! $(command -v ${name}) ]]; then
    log "ERROR: The binary '$name' is required by this script but is not installed or in the system's PATH."
    exit 1
  fi
}

# download and install box
function download_box {
    local readonly tmp_dir="$1"
    local readonly box_version="$2"

    cat <<EOF
-------------------------------------------------------------------------------
Installing box ${box_version} (https://github.com/humbug/box)
-------------------------------------------------------------------------------
EOF

    if [ ! -d "${tmp_dir}" ] ; then
        mkdir -p "${tmp_dir}"
    fi

    if [ -f "${tmp_dir}/box.phar" ] ; then
        return
    fi

    curl -LSs \
        -o "${tmp_dir}/box.phar" \
        "https://github.com/humbug/box/releases/download/${box_version}/box.phar"

    chmod +x "${tmp_dir}/box.phar"
}

# download or fetch agent
function download_agent {
    local readonly agent_version="$1"
    local readonly cur_dir="$2"
    local readonly tmp_dir="$3"

    local used_agent_version

    if [ -z "${agent_version}" ] ; then
        used_agent_version="local"
    else
        used_agent_version="${agent_version}"
    fi

    cat <<EOF
-------------------------------------------------------------------------------
Installing hal-agent ${used_agent_version} (https://github.com/hal-platform/hal-agent)
-------------------------------------------------------------------------------
EOF

    if [ -n "${agent_version}" ] ; then
        composer create-project \
            --remove-vcs \
            --no-dev \
            --no-interaction \
            --no-progress \
            hal/hal-agent "${tmp_dir}" "${agent_version}"
    else
        copy_local_agent "${cur_dir}" "${tmp_dir}"
    fi
}

function copy_local_agent {
    local readonly cur_dir="$1"
    local readonly tmp_dir="$2"

    mkdir "${tmp_dir}"

    rsync \
        -r \
        --include="bin/" \
        --include="bin/**" \
        --include="config/" \
        --include="config/**" \
        --include="src/" \
        --include="src/**" \
        --include="box.json" \
        --include="LICENSE" \
        --include="composer.json" \
        --include="composer.lock" \
        --exclude="*" \
        "${cur_dir}/../" "${tmp_dir}"

    if [ -f "${tmp_dir}/config/.env" ] ; then
        rm "${tmp_dir}/config/.env"
    fi

    composer install \
        --no-dev \
        --no-interaction \
        --no-progress \
        --working-dir="${tmp_dir}"
}

function run_agent_optimizations {
    local readonly tmp_dir="$1"
    local readonly env_file="$2"

    cd "${tmp_dir}"

    if [ -f "${env_file}" ] ; then
        echo ; echo "Copying \"${env_file}\" as .env file"
        cp "${env_file}" ./config/.env
    fi

    echo
    ./bin/cache-container

    echo
    ./bin/cache-doctrine-proxies

    echo
    composer dump-autoload \
        --classmap-authoritative
}

# compile agent
function compile_agent {
    local readonly output_phar_file="$1"
    local readonly cur_dir="$2"
    local readonly tmp_dir="$3"

    cd "${tmp_dir}"

    cat <<EOF
-------------------------------------------------------------------------------
Compiling hal-agent phar
-------------------------------------------------------------------------------
EOF

    php "${tmp_dir}/box.phar" compile -vv

    cp "${tmp_dir}/hal.phar" "${output_phar_file}"
    du -h "${output_phar_file}"

    rm -rf "${tmp_dir}"

    cd "${cur_dir}"
}

function help_message {
    local readonly output_file="$1"
    cat <<EOF
-------------------------------------------------------------------------------
Bundle PHAR
-------------------------------------------------------------------------------
Builds an optimized phar for easily deploying the agent CLI.
PHAR will be output to "${output_file}"

Options:
    --version    - git ref or branch (default: master)
    --custom-env - envfile (default: none)

Usage:
bundle-phar [--version \$branch_or_ref] [--custom-env \$path_to_custom_envfile]

EOF
}

function run_script {
    local agent_version
    local custom_env_file

    local readonly cur_dir="$( cd "$( dirname "$0" )" && pwd )"
    local readonly wd_dir="$(pwd)"
    local readonly output_phar_file="${wd_dir}/hal.phar"
    local readonly box_version="${HAL_BOX_VERSION:-3.0.0-beta.4}"

    temp_dir="${cur_dir}/.phar"

    while [[ $# > 0 ]]; do
        local key="$1"

        case "$key" in
            --help)
                help_message "${output_phar_file}"
                exit 0
                ;;
            --version)
                agent_version="$2" ; shift
                ;;
            --custom-env)
                custom_env_file="$2" ; shift
                ;;
            *)
                echo "ERROR: Unrecognized argument: $key"
                exit 1
                ;;
        esac

        shift
    done

    ensure_is_installed "composer"
    ensure_is_installed "curl"
    ensure_is_installed "php"
    ensure_is_installed "tar"

    download_agent          "${agent_version}" "${cur_dir}" "${temp_dir}"
    download_box            "${temp_dir}" "${box_version}"
    run_agent_optimizations "${temp_dir}" "${custom_env_file}"
    compile_agent           "${output_phar_file}" "${wd_dir}" "${temp_dir}"
}

cleanup_temp() {
  if [ -d "${temp_dir}" ] ; then
    echo "Removing ${temp_dir}"
    rm -rf "${temp_dir}"
  fi
}

trap cleanup_temp EXIT

run_script $@
